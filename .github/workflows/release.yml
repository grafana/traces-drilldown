name: Publish to plugin catalog
description: Upload new plugin artifact to GCS & publish to plugin catalog

# Version Tag Publishing Process (TODO: Automate this process more):
# 1. Create your feature branch and make changes
# 2. Get your feature PR approved
# 3. Create a separate version bump PR:
#    - git switch -c bump-version-vX.Y.Z
#    - update CHANGELOG.md with a link to the forthcoming tag's release notes
#    - npm version <type>  # this creates the commit and tag (see https://docs.npmjs.com/cli/commands/npm-version for <type> options, e.g. patch, minor, major, prerelease, etc.)
#    - git push origin bump-version-vX.Y.Z --follow-tags
# 4. Get version bump PR approved
# 5. Merge feature PR first
# 6. Merge version bump PR
# The workflow will trigger when the version tag lands on main via the merge

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to publish to
        required: true
        type: choice
        options:
          - 'dev'
          - 'ops'
          - 'prod'
  push:
    branches:
      - main

permissions:
  contents: 'write'
  id-token: 'write'
  attestations: 'write'

jobs:
  CD:
    name: Deploy plugin
    # Don't run on forks, ensure tag is on main branch, and restrict workflow_dispatch to main/tag branches
    if: github.repository == 'grafana/traces-drilldown'
    uses: grafana/plugin-ci-workflows/.github/workflows/cd.yml@main
    with:
      environment: ${{ inputs.environment || 'ops' }} # publishing to 'prod' will also deploy to 'ops' and 'dev'
      attestation: true # this guarantees that the plugin was built from

      # Add version suffix for non-release pushes to main
      plugin-version-suffix:
        ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'npm version')) && github.sha || '' }}

        # Deploy provisioned plugin to Grafana Cloud
      grafana-cloud-deployment-type: provisioned
      argo-workflow-slack-channel: '#proj-tracesdrilldown-cd'

      # Playwright
      run-playwright: false
      run-playwright-docker: false
      upload-playwright-artifacts: true # IMPORTANT: we must ensure there are no unmasked secrets in the E2E tests
      run-playwright-with-skip-grafana-dev-image: true
      playwright-report-path: e2e/test-reports/
      playwright-docker-compose-file: docker-compose.yaml
      playwright-grafana-url: http://localhost:3001
